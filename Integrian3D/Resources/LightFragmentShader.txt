#version 460 core

in vec3 vPos;
in vec3 vNormal;

out vec4 FragColor;
  
uniform vec3 _ObjectColor;
uniform vec3 _LightColor;
uniform vec3 _LightPos;
uniform vec3 _ViewPos;

vec3 CalculateAmbient()
{
    float ambientStrength = 0.1;
    return ambientStrength * _LightColor;
}

vec3 CalculateDiffuse(vec3 normal, vec3 lightDirection)
{
    float diff = max(dot(normal, lightDirection), 0.0);

    return diff * _LightColor;
}

vec3 CalculateSpecular(vec3 normal, vec3 lightDirection)
{
    float specularStrength = 0.5f;

    vec3 viewDirection = normalize(_ViewPos - vPos);
    vec3 reflectDirection = reflect(-lightDirection, normal);

    float specular = pow(max(dot(viewDirection, reflectDirection), 0.0), 32);

    return specularStrength * specular * _LightColor;
}

void main()
{
    vec3 normal = normalize(vNormal);
    vec3 lightDirection = normalize(_LightPos - vPos);

    vec3 result = (CalculateAmbient() + CalculateDiffuse(normal, lightDirection) + CalculateSpecular(normal, lightDirection)) * _ObjectColor;

    FragColor = vec4(result, 1.0);
}